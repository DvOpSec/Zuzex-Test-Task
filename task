Перед выполнением задач: на системе должен полноценно работать docker и быть установлен docker-compose (версия не критична). Образы docker использовать из официального hub.docker.com. Можно (и нужно) пользоваться всеми доступными средствами.
Задание 1.1 - Расписать docker-compose.yml, который разворачивает Wordpress CMS вместе c phpMyAdmin
Ключевые требования:
Использоуемые docker-образы должны быть фиксированных версий 
Контейнер с wordpress должен быть доступен на 4000-ом порту docker-хоста. Контейнер с phpMyAdmin - на 4001-ом 
При запуске mysql контейнера, должна создаваться база данных с именем wp_db. Пользователь и его пароль для подключения могут быть произвольными 
Настройки подключения wordpress к mysql должны быть заранее заданы через docker-compose.yml, тем самым минуя настройку подключения к БД через UI wordpress 
Исходники wordpress, находящиеся в контейнере, должны быть доступны в файловой системе docker-хоста из директории data/wp, находящейся рядом с docker-compose.yml. Аналогично и для контейнера mysql c его БД — доступ из директории data/mysql
При попадании на главную страницу phpmyadmin, должна отображаться форма авторизации c user/password к БД mysql 
Будет плюсом, если дополнительно:
Контейнеры wordpress и phpmyadmin будут стартовать после успешного запуска контейнера mysql 
Для phpmyadmin не придётся на форме авторизации указывать mysql-хост для подключения 
Для контейнера mysql будет создан healthcheck 
Логин и пароль от БД будут оформлены через переменные в файле .env

Результат выполненного задания будет оцениваться по написанному docker-compose.yml файлу
Задание 1.2 - Добавление веб-сервера
Предположим, что мы хотим развернуть наш docker-compose.yml на выделенном сервере, где будут открыты только http и https порты. Специально для этого мы внесём правки в docker-compose.yml и протестируем всё у себя на локальной машине...

Ключевые требования:
Добавить к созданному в предыдущем задании docker-compose.yml контейнер с nginx (или любым другим web-сервером), который будет использоваться в качестве reverse proxy. Сам контейнер с веб-сервером должен иметь host network (если есть проблема с конфликтом портов между контейнером и хостом - решить её). 
Посредством конфиг-файла веб-сервера, сконфигурировать его таким образом, чтобы: 
при обращении по корневому роуту localhost (/) открывался wordpress-сайт 
по роуту localhost/wp-admin открывалась админка wordpress 
по роуту localhost/phpmyadmin открывался phpmyadmin 
Подсказка: для корректной работы phpmyadmin в режиме доступа через роут используйте environment-переменную PMA_ABSOLUTE_URI и обратите внимание на слэши эндпоинтов в самом веб-конфиге
Результат выполненного задания будет оцениваться по написанному конфигу веб-сервера и модифицированному docker-compose.yml файлу
Задание 1.3 - Мониторинг
Ключевые требования:
Взять наработки из предыдущих заданий и добавить к ним стэк Grafana + Prometheus + node_exporter (можно найти и взять из готового compose). Сконфигурировать scrape_config для Prometheus добавив эндпоинт node_exporter 
Проверить, что Grafana может соединиться с контейнером Prometheus в качестве datasource. Добавить готовый дашборд в Grafana для вывода метрик node_exporter 
Дополнить конфиг веб-сервера добавив роут localhost/grafana, который будет открывать UI Grafana. Воспользуйтесь соответствующими инструкциями по офф. документации 

Результат выполненного задания будет оцениваться по модифицированному docker-compose.yml файлу и конфигу веб-сервера + общий скриншот добавленного Grafana-дашборда с метриками
